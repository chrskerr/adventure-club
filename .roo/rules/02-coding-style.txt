1. File Organization:
   - Group related functions together
   - Place imports at the top of the file
   - Order methods logically
   - Group related files in logical folders
   - Each file should be responsible for a single class or functions

2. Technology requirements:
   - Prefer typescript for new code
   - Prefer tailwindcss for styling
   - Prefer Astro components to React components, unless there is a compelling reason to use React components

3. Coding standards
   - Use meaningful names for variables and functions
   - Keep functions short and focused
   - Avoid unnecessary complexity
   - Follow the DRY principle
   - Use comments to explain complex logic
   - Focus on code readability and maintainability
   - Each UI component or function should have a clear purpose and be well-documented
   - Split UI components and functions into smaller, reusable parts if their purpose is not clear or if they are too complex
   - When making changes, consider the complete context of all files before determining the next steps
   - Refactor existing code to match the new requirements and ensure that the other coding standards remain met
   - Do not allow technical determining

4. UX/UI standards
   - Ensure all new features are accessible to all users
   - Ensure all new features are responsive
